// <auto-generated />
using System;
using C8S.Domain.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace C8S.Domain.EFCore.Migrations
{
    [DbContext(typeof(C8SDbContext))]
    [Migration("20250116224547_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<string>("AgeLevel")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ClubSize")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OldSystemClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemCoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemMeetingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartsOn")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ClubId");

                    b.HasIndex("OldSystemClubId")
                        .IsUnique()
                        .HasFilter("[OldSystemClubId] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SaleId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubPersonDb", b =>
                {
                    b.Property<int>("ClubPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubPersonId"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ClubPersonId");

                    b.HasIndex("ClubId");

                    b.HasIndex("PersonId");

                    b.ToTable("ClubPersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceDb", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoicePersonDb", b =>
                {
                    b.Property<int>("InvoicePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoicePersonId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("InvoicePersonId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PersonId");

                    b.ToTable("InvoicePersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.NoteDb", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");

                    b.HasDiscriminator<string>("Reference");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("ArriveBy")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EmailedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMilitary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Line2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("OldSystemClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("OrderedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset?>("ShippedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.HasIndex("ClubId")
                        .IsUnique()
                        .HasFilter("[ClubId] IS NOT NULL");

                    b.HasIndex("OldSystemOrderId")
                        .IsUnique()
                        .HasFilter("[OldSystemOrderId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderSkuDb", b =>
                {
                    b.Property<int>("OrderSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderSkuId"));

                    b.Property<Guid?>("OldSystemOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemOrderSkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemSkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.HasKey("OrderSkuId");

                    b.HasIndex("OldSystemOrderSkuId")
                        .IsUnique()
                        .HasFilter("[OldSystemOrderSkuId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("SkuId");

                    b.ToTable("OrderSkus");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PermissionDb", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SkuId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("JobTitleOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OldSystemCoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WordPressUser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PersonId");

                    b.HasIndex("OldSystemCoachId")
                        .IsUnique()
                        .HasFilter("[OldSystemCoachId] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMilitary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Line2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("OldSystemCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemPostalAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemUsaPostalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TaxIdentifier")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("PlaceId");

                    b.HasIndex("OldSystemOrganizationId")
                        .IsUnique()
                        .HasFilter("[OldSystemOrganizationId] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestDb", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("FullSlateAppointmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OldSystemAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemLinkedCoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemLinkedOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonTimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PlacePostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceState")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PlaceTaxIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceTypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSourceOther")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTimeOffset>("SubmittedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkshopCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.HasIndex("OldSystemApplicationId")
                        .IsUnique()
                        .HasFilter("[OldSystemApplicationId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestedClubDb", b =>
                {
                    b.Property<int>("RequestedClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestedClubId"));

                    b.Property<string>("AgeLevel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ClubSize")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("OldSystemApplicationClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldSystemLinkedClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartsOn")
                        .HasColumnType("date");

                    b.HasKey("RequestedClubId");

                    b.HasIndex("OldSystemApplicationClubId")
                        .IsUnique()
                        .HasFilter("[OldSystemApplicationClubId] IS NOT NULL");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestedClubs");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SaleDb", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("SaleId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SalePersonDb", b =>
                {
                    b.Property<int>("SalePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalePersonId"));

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("SalePersonId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalePersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ShipmentDb", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShipMethod")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ShipMethodOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShipmentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SkuDb", b =>
                {
                    b.Property<int>("SkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkuId"));

                    b.Property<string>("AgeLevel")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ClubSize")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OldSystemSkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("SkuId");

                    b.HasIndex("OldSystemSkuId")
                        .IsUnique()
                        .HasFilter("[OldSystemSkuId] IS NOT NULL");

                    b.ToTable("Skus");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.UnfinishedDb", b =>
                {
                    b.Property<int>("UnfinishedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnfinishedId"));

                    b.Property<bool?>("AddressHasChanged")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ChosenTimeSlot")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ClubsString")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comments")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart01On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart02On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart03On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart04On")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("HasHostedBefore")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonTimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PlacePostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceState")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PlaceTaxIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceTypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSourceOther")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SubmittedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkshopCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnfinishedId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.ToTable("Unfinisheds");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.WorkshopCodeDb", b =>
                {
                    b.Property<int>("WorkshopCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkshopCodeId"));

                    b.Property<DateTimeOffset?>("EndsOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("StartsOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("WorkshopCodeId");

                    b.ToTable("WorkshopCodes");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.HasIndex("ClubId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Club");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Invoice");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasIndex("PersonId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasIndex("PlaceId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.HasIndex("RequestId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SaleNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.HasIndex("SaleId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Clubs")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.SaleDb", "Sale")
                        .WithMany("Clubs")
                        .HasForeignKey("SaleId");

                    b.Navigation("Place");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubPersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", "Club")
                        .WithMany("ClubPersons")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("ClubPersons")
                        .HasForeignKey("PersonId");

                    b.Navigation("Club");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoicePersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithMany("InvoicePersons")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("InvoicePersons")
                        .HasForeignKey("PersonId");

                    b.Navigation("Invoice");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", "Club")
                        .WithOne("Order")
                        .HasForeignKey("C8S.Domain.EFCore.Models.OrderDb", "ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderSkuDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", "Order")
                        .WithMany("OrderSkus")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.SkuDb", "Sku")
                        .WithMany("OrderSkus")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PermissionDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("Permissions")
                        .HasForeignKey("PersonId");

                    b.HasOne("C8S.Domain.EFCore.Models.SkuDb", "Sku")
                        .WithMany("Permissions")
                        .HasForeignKey("SkuId");

                    b.Navigation("Person");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Persons")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("Requests")
                        .HasForeignKey("PersonId");

                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Requests")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Person");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestedClubDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.RequestDb", "Request")
                        .WithMany("RequestedClubs")
                        .HasForeignKey("RequestId");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SaleDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithOne("Sale")
                        .HasForeignKey("C8S.Domain.EFCore.Models.SaleDb", "InvoiceId");

                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Sales")
                        .HasForeignKey("PlaceId");

                    b.HasOne("C8S.Domain.EFCore.Models.RequestDb", "Request")
                        .WithOne("Sale")
                        .HasForeignKey("C8S.Domain.EFCore.Models.SaleDb", "RequestId");

                    b.Navigation("Invoice");

                    b.Navigation("Place");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SalePersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("SalePersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.SaleDb", "Sale")
                        .WithMany("SalePersons")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ShipmentDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.UnfinishedDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.RequestDb", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", "Club")
                        .WithMany("Notes")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Club");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithMany("Notes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", "Order")
                        .WithMany("Notes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("Notes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Notes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.RequestDb", "Request")
                        .WithMany("Notes")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SaleNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.SaleDb", "Sale")
                        .WithMany("Notes")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.Navigation("ClubPersons");

                    b.Navigation("Notes");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceDb", b =>
                {
                    b.Navigation("InvoicePersons");

                    b.Navigation("Notes");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("OrderSkus");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.Navigation("ClubPersons");

                    b.Navigation("InvoicePersons");

                    b.Navigation("Notes");

                    b.Navigation("Permissions");

                    b.Navigation("Requests");

                    b.Navigation("SalePersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Clubs");

                    b.Navigation("Notes");

                    b.Navigation("Persons");

                    b.Navigation("Requests");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestDb", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("RequestedClubs");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SaleDb", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Notes");

                    b.Navigation("SalePersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.SkuDb", b =>
                {
                    b.Navigation("OrderSkus");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
