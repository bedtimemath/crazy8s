// <auto-generated />
using System;
using C8S.Domain.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace C8S.Domain.EFCore.Migrations
{
    [DbContext(typeof(C8SDbContext))]
    partial class C8SDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("KitId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartsOn")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("ClubId");

                    b.HasIndex("KitId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TicketId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubPersonDb", b =>
                {
                    b.Property<int>("ClubPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubPersonId"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ClubPersonId");

                    b.HasIndex("ClubId");

                    b.HasIndex("PersonId");

                    b.ToTable("ClubPersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceDb", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoicePersonDb", b =>
                {
                    b.Property<int>("InvoicePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoicePersonId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("InvoicePersonId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PersonId");

                    b.ToTable("InvoicePersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.KitDb", b =>
                {
                    b.Property<int>("KitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitId"));

                    b.Property<string>("AgeLevel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Comments")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("CASE WHEN [Version] IS NOT NULL THEN 'C8.S' + CAST([Season] AS VARCHAR) + '.' + [Year] + '.' + [Version] + '.' + [AgeLevel] ELSE 'C8.S' + CAST([Season] AS VARCHAR) + '.' + [Year] + '.' + [AgeLevel] END");

                    b.Property<int?>("KitPageId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("KitId");

                    b.HasIndex("KitPageId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("Year", "Season", "AgeLevel", "Version")
                        .IsUnique()
                        .HasFilter("[Version] IS NOT NULL");

                    b.ToTable("Kits");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.KitPageDb", b =>
                {
                    b.Property<int>("KitPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitPageId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("KitPageId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("KitPages");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.NoteDb", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");

                    b.HasDiscriminator<string>("Reference");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OfferDb", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FulcoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OfferId");

                    b.HasIndex("FulcoId")
                        .IsUnique();

                    b.HasIndex("Year", "Season", "Version")
                        .IsUnique()
                        .HasFilter("[Version] IS NOT NULL");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OldNewDb", b =>
                {
                    b.Property<int>("OldNewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OldNewId"));

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<string>("NewTableName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("OldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldTableName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OldNewId");

                    b.HasIndex("NewTableName", "NewId");

                    b.HasIndex("OldTableName", "OldId");

                    b.HasIndex("OldTableName", "OldId", "NewTableName", "NewId")
                        .IsUnique();

                    b.ToTable("OldNews");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("ArriveBy")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EmailedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMilitary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Line2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("OrderedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset?>("ShippedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PermissionDb", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("KitPageId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("KitPageId");

                    b.HasIndex("PersonId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("JobTitleOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WordPressId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMilitary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Line2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TaxIdentifier")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("PlaceId");

                    b.HasIndex("ParentId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestDb", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("AppointmentStartsOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comments")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReferenceSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSourceOther")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset>("SubmittedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkshopCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ShipmentDb", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShipMethod")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ShipMethodOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShipmentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketDb", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("TicketId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketPersonDb", b =>
                {
                    b.Property<int>("TicketPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketPersonId"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("TicketPersonId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketPersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.UnfinishedDb", b =>
                {
                    b.Property<int>("UnfinishedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnfinishedId"));

                    b.Property<bool?>("AddressHasChanged")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ChosenTimeSlot")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ClubsString")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comments")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart01On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart02On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart03On")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndPart04On")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("HasHostedBefore")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonTimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PlacePostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceState")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PlaceTaxIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PlaceTypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceSourceOther")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset?>("SubmittedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WorkshopCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnfinishedId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Unfinisheds");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.WorkshopCodeDb", b =>
                {
                    b.Property<int>("WorkshopCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkshopCodeId"));

                    b.Property<DateTimeOffset?>("EndsOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("StartsOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("WorkshopCodeId");

                    b.ToTable("WorkshopCodes");
                });

            modelBuilder.Entity("OrderClubs", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ClubId");

                    b.HasIndex("ClubId");

                    b.ToTable("OrderClubs");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.HasIndex("ClubId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Club");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Invoice");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasIndex("PersonId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasIndex("PlaceId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketNoteDb", b =>
                {
                    b.HasBaseType("C8S.Domain.EFCore.Models.NoteDb");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasIndex("TicketId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("Ticket");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.KitDb", "Kit")
                        .WithMany("Clubs")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Clubs")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.TicketDb", "Ticket")
                        .WithMany("Clubs")
                        .HasForeignKey("TicketId");

                    b.Navigation("Kit");

                    b.Navigation("Place");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubPersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", "Club")
                        .WithMany("ClubPersons")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("ClubPersons")
                        .HasForeignKey("PersonId");

                    b.Navigation("Club");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoicePersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithMany("InvoicePersons")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("InvoicePersons")
                        .HasForeignKey("PersonId");

                    b.Navigation("Invoice");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.KitDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.KitPageDb", "KitPage")
                        .WithMany("Kits")
                        .HasForeignKey("KitPageId");

                    b.HasOne("C8S.Domain.EFCore.Models.OfferDb", "Offer")
                        .WithOne("Kit")
                        .HasForeignKey("C8S.Domain.EFCore.Models.KitDb", "OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitPage");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PermissionDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.KitPageDb", "KitPage")
                        .WithMany("Permissions")
                        .HasForeignKey("KitPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("Permissions")
                        .HasForeignKey("PersonId");

                    b.Navigation("KitPage");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Persons")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ShipmentDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithOne("Ticket")
                        .HasForeignKey("C8S.Domain.EFCore.Models.TicketDb", "InvoiceId");

                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Tickets")
                        .HasForeignKey("PlaceId");

                    b.HasOne("C8S.Domain.EFCore.Models.RequestDb", "Request")
                        .WithOne("Ticket")
                        .HasForeignKey("C8S.Domain.EFCore.Models.TicketDb", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Invoice");

                    b.Navigation("Place");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketPersonDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("TicketPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.TicketDb", "Ticket")
                        .WithMany("TicketPersons")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("OrderClubs", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", null)
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.ClubDb", "Club")
                        .WithMany("Notes")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Club");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.InvoiceDb", "Invoice")
                        .WithMany("Notes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.OrderDb", "Order")
                        .WithMany("Notes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PersonDb", "Person")
                        .WithMany("Notes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.PlaceDb", "Place")
                        .WithMany("Notes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketNoteDb", b =>
                {
                    b.HasOne("C8S.Domain.EFCore.Models.TicketDb", "Ticket")
                        .WithMany("Notes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.ClubDb", b =>
                {
                    b.Navigation("ClubPersons");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.InvoiceDb", b =>
                {
                    b.Navigation("InvoicePersons");

                    b.Navigation("Notes");

                    b.Navigation("Orders");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.KitDb", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.KitPageDb", b =>
                {
                    b.Navigation("Kits");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OfferDb", b =>
                {
                    b.Navigation("Kit")
                        .IsRequired();
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.OrderDb", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PersonDb", b =>
                {
                    b.Navigation("ClubPersons");

                    b.Navigation("InvoicePersons");

                    b.Navigation("Notes");

                    b.Navigation("Permissions");

                    b.Navigation("TicketPersons");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.PlaceDb", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Clubs");

                    b.Navigation("Notes");

                    b.Navigation("Persons");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.RequestDb", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("C8S.Domain.EFCore.Models.TicketDb", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Notes");

                    b.Navigation("TicketPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
